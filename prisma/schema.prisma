generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  assessments       Assessment[]
  assessmentResults AssessmentResult[]
  certifications    Certification[]
  menteeAssignments MentorMentee[]     @relation("MenteeAssignments")
  mentorAssignments MentorMentee[]     @relation("MentorAssignments")
  referredBy        MentorReference[]  @relation("MentorReferences")
  sessions          Session[]
  organizations     UserOrganization[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MentorMentee {
  id        String    @id @default(cuid())
  mentorId  String
  menteeId  String
  startDate DateTime?
  status    String?
  goals     String?
  mentee    User      @relation("MenteeAssignments", fields: [menteeId], references: [id])
  mentor    User      @relation("MentorAssignments", fields: [mentorId], references: [id])

  @@unique([mentorId, menteeId])
}

model UserOrganization {
  userId         String
  organizationId String
  role           Role
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  assessments Assessment[]
  users       UserOrganization[]
}

model Assessment {
  id             String             @id @default(cuid())
  title          String
  description    String?
  organizationId String
  passingScore   Float?
  userId         String?
  organization   Organization       @relation(fields: [organizationId], references: [id])
  User           User?              @relation(fields: [userId], references: [id])
  results        AssessmentResult[]
  certifiedUsers Certification[]
  questions      Question[]
}

model Question {
  id           String     @id @default(cuid())
  assessmentId String
  text         String
  youtubeUrl   String?
  choices      Choice[]
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
}

model Choice {
  id         String   @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
}

model Certification {
  id           String     @id @default(cuid())
  userId       String
  assessmentId String
  score        Float
  issuedAt     DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, assessmentId])
}

model AssessmentResult {
  id           String     @id @default(cuid())
  userId       String
  assessmentId String
  score        Float
  completedAt  DateTime   @default(now())
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, assessmentId, completedAt])
}

model MentorReference {
  id                 String              @id @default(cuid())
  mentorId           String
  referrerEmail      String
  isCompleted        Boolean             @default(false)
  completedAt        DateTime?
  mentor             User                @relation("MentorReferences", fields: [mentorId], references: [id])
  referenceResponses ReferenceResponse[]

  @@unique([mentorId, referrerEmail])
}

model ReferenceResponse {
  id                String          @id @default(cuid())
  mentorReferenceId String
  question          String
  response          String
  mentorReference   MentorReference @relation(fields: [mentorReferenceId], references: [id])

  @@index([mentorReferenceId])
}

enum Role {
  ADMIN
  MENTOR
  MENTEE
}
